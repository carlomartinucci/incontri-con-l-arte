{"version":3,"sources":["rembrandt.jpg","emmaus.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultActiveKey","DeviceDetector","parse","navigator","userAgent","device","os","client","name","includes","type","zoomMeetingUrl","NotUsing","className","Download","href","Join","AlreadyInstalled","Alert","variant","MeetingId","App","Container","Jumbotron","Tabs","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mJCarCC,EAAoB,WACxB,IAD8B,GACP,IAAIC,KACmBC,MAAMC,UAAUC,WAAtDC,EAFsB,EAEtBA,OAAQC,EAFc,EAEdA,GAAIC,EAFU,EAEVA,OAEpB,MAAgB,QAAZD,EAAGE,MAAkB,CAAC,aAAc,UAAUC,SAASJ,EAAOK,MACzD,SACc,QAAZJ,EAAGE,KACL,MACc,YAAZF,EAAGE,KACL,UACc,YAAZF,EAAGE,KACL,UACkB,WAAhBD,EAAOC,KACT,SAEA,UAfe,GA6BpBG,EAAiB,wCAmGjBC,EAAW,SAAC,GAAD,IAAGN,EAAH,EAAGA,GAAH,OACf,uBAAGO,UAAU,yBAAb,mBACmBP,EADnB,2FAMIQ,EAAW,SAAC,GAAD,IAAGR,EAAH,EAAGA,GAAH,OACf,qCACUA,EADV,IACe,IACb,uBAAGS,KAAK,4BAAR,4DAEK,IAJP,2BAK0B,wCAL1B,gCAKyE,IACvE,wDANF,8EAWIC,EAAO,kBACX,6EAEE,uBAAGD,KAAMJ,GAAT,+CAFF,MAMIM,EAAmB,kBACvB,kBAACC,EAAA,EAAD,CAAOC,QAAQ,WAAf,8BAC2B,IACzB,uBAAGJ,KAAMJ,GAAT,2CAFF,qCAOIS,EAAY,kBAAM,kBAACF,EAAA,EAAD,CAAOC,QAAQ,OAAON,UAAU,QAAhC,kCACS,6BADT,wCAEe,6BAFf,8BAMTQ,EAzIH,kBACV,kBAACC,EAAA,EAAD,CAAWT,UAAU,QAClB,EAED,kBAACU,EAAA,EAAD,KACE,wBAAIV,UAAU,UAAd,0BACA,uDACA,uDAGF,kBAACW,EAAA,EAAD,CAAML,QAAQ,QAAQnB,iBAAkBA,GACtC,kBAACyB,EAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,iBAC3B,kBAAC,EAAD,CAAUrB,GAAG,kBADf,kEAEkE,IAChE,uBAAGS,KAAMJ,GAAT,2BAHF,sDAME,kBAAC,EAAD,OAGF,kBAACc,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,kBAAC,EAAD,CAAUrB,GAAG,YACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAUA,GAAG,YAEb,gHAEe,qCAFf,KAKA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGF,kBAACmB,EAAA,EAAD,CAAKC,SAAS,MAAMC,MAAM,OACxB,kBAAC,EAAD,CAAUrB,GAAG,QACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAUA,GAAG,QAEb,iGACsE,IACpE,wCAFF,yGAG+C,kCAH/C,KAMA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGF,kBAACmB,EAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,eAC3B,kBAAC,EAAD,CAAUrB,GAAG,kBACb,kBAAC,EAAD,MAEA,wFAC6D,IAC3D,uBAAGS,KAAK,iEAAR,8CAFF,KAQA,qDACyB,uCADzB,mBAC0D,IACxD,mDAFF,kGAMA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGF,kBAACU,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,kBAAC,EAAD,CAAUrB,GAAG,2BACb,kBAAC,EAAD,MAEA,mGACwE,IACtE,uBAAGS,KAAK,6EAAR,6CAFF,KAQA,2DAC+B,wCAD/B,qDAEiC,oCAFjC,sBAKA,kBAAC,EAAD,MACA,kBAAC,EAAD,UC3HYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBlC,WACrBA,UAAUmC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1fa17fe4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rembrandt.559040d6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/emmaus.f18c286f.jpg\";","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Image from \"react-bootstrap/Image\";\nimport Container from \"react-bootstrap/Container\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport rembrandt from \"./rembrandt.jpg\";\nimport emmaus from \"./emmaus.jpg\";\n\nimport DeviceDetector from \"device-detector-js\";\n\nconst defaultActiveKey = (() => {\n  const deviceDetector = new DeviceDetector();\n  const { device, os, client } = deviceDetector.parse(navigator.userAgent);\n\n  if (os.name === \"iOS\" && [\"smartphone\", \"tablet\"].includes(device.type)) {\n    return \"iphone\";\n  } else if (os.name === \"iOS\") {\n    return \"mac\";\n  } else if (os.name === \"Windows\") {\n    return \"windows\";\n  } else if (os.name === \"Android\") {\n    return \"android\";\n  } else if (client.name === \"Chrome\") {\n    return \"chrome\";\n  } else {\n    return \"windows\";\n  }\n})();\n\n// `\n// Topic: Catechesi con l'arte\n// Time: May 9, 2020 04:00 PM Rome\n\n// Join Zoom Meeting\n\n\n// Meeting ID: 857 5787 4856\n// `\n\nconst zoomMeetingUrl = \"https://us02web.zoom.us/j/85757874856\";\n\nconst App = () => (\n  <Container className=\"p-3\">\n    {false && <Image src={rembrandt} fluid></Image>}\n\n    <Jumbotron>\n      <h1 className=\"header\">Meditazioni con l'arte</h1>\n      <h2>Sabato 9 maggio, ore 16</h2>\n      <p>Istruzioni per accedere</p>\n    </Jumbotron>\n\n    <Tabs variant=\"pills\" defaultActiveKey={defaultActiveKey}>\n      <Tab eventKey=\"chrome\" title=\"Google Chrome\">\n        <NotUsing os=\"Google Chrome\" />\n        Per seguire l'incontro sull'arte usando Google Chrome, ti basta{\" \"}\n        <a href={zoomMeetingUrl}>cliccare su questo link</a> che ti porterà\n        direttamente al meeting su ZOOM.\n\n        <MeetingId />\n      </Tab>\n\n      <Tab eventKey=\"windows\" title=\"Windows\">\n        <NotUsing os=\"Windows\" />\n        <AlreadyInstalled />\n\n        <Download os=\"Windows\" />\n\n        <p>\n          Finito lo scaricamento, apri il file .exe che hai scaricato e clicca\n          sul pulsante <em>Sì</em>.\n        </p>\n\n        <Join />\n        <MeetingId />\n      </Tab>\n\n      <Tab eventKey=\"mac\" title=\"Mac\">\n        <NotUsing os=\"Mac\" />\n        <AlreadyInstalled />\n\n        <Download os=\"Mac\" />\n\n        <p>\n          Finito lo scaricamento, apri il pacchetto .pkg, clicca sul pulsante{\" \"}\n          <em>Continua</em> e concedi all’applicazione il permesso di accedere\n          alla cartella Download cliccando sul bottone <em>OK</em>.\n        </p>\n\n        <Join />\n        <MeetingId />\n      </Tab>\n\n      <Tab eventKey=\"iphone\" title=\"iPhone/iPad\">\n        <NotUsing os=\"iPhone o iPad\" />\n        <AlreadyInstalled />\n\n        <p>\n          Per seguire l'incontro sull'arte da iPhone o iPad, scarica{\" \"}\n          <a href=\"https://apps.apple.com/it/app/zoom-cloud-meetings/id546505307\">\n            l'applicazione di ZOOM tramite l'App Store\n          </a>\n          .\n        </p>\n\n        <p>\n          Poi premi sul pulsante <em>Ottieni</em> accanto all'app{\" \"}\n          <em>ZOOM Cloud Meetings</em> e, se necessario, conferma tramite Face\n          ID, Touch ID o con la password del tuo account Apple.\n        </p>\n\n        <Join />\n        <MeetingId />\n      </Tab>\n\n      <Tab eventKey=\"android\" title=\"Android\">\n        <NotUsing os=\"un dispositivo Android\" />\n        <AlreadyInstalled />\n\n        <p>\n          Per seguire l'incontro sull'arte dal tuo dispositivo Android, scarica{\" \"}\n          <a href=\"https://play.google.com/store/apps/details?id=us.zoom.videomeetings&hl=it\">\n            l'applicazione di ZOOM tramite Play Store\n          </a>\n          .\n        </p>\n\n        <p>\n          Poi premi sul pulsante verde <em>Installa</em>. Al termine della\n          procedura, clicca sul pulsante <em>Apri</em> per avviare ZOOM.\n        </p>\n\n        <Join />\n        <MeetingId />\n      </Tab>\n    </Tabs>\n  </Container>\n);\n\nconst NotUsing = ({ os }) => (\n  <p className=\"small text-muted mt-3\">\n    Non stai usando {os}? Scegli quello che stai usando cliccando sopra e segui\n    le istruzioni corrette per te.\n  </p>\n);\n\nconst Download = ({ os }) => (\n  <p>\n    Se usi {os},{\" \"}\n    <a href=\"https://zoom.us/download\">\n      vai a questa pagina per scaricare ZOOM sul tuo computer:\n    </a>{\" \"}\n    clicca sul pulsante blu <em>Download</em> posto in alto, nella sezione{\" \"}\n    <em>Zoom Client for Meetings</em>, e attendi il download del pacchetto\n    d’installazione del programma.\n  </p>\n);\n\nconst Join = () => (\n  <p>\n    Una volta scaricato ZOOM, puoi partecipare all'\n    <a href={zoomMeetingUrl}>incontro sull'arte cliccando su questo link</a>.\n  </p>\n);\n\nconst AlreadyInstalled = () => (\n  <Alert variant=\"success\">\n    Hai già installato ZOOM?{\" \"}\n    <a href={zoomMeetingUrl}>Clicca qui per partecipare all'incontro</a>.\n    Altrimenti segui le istruzioni\n  </Alert>\n);\n\nconst MeetingId = () => <Alert variant=\"info\" className=\"mt-3\">\n  Argomento: Catechesi con l'arte<br/>\n  Data: Sabato 9 Maggio 2020, ore 16.00<br/>\n  Meeting ID: 857 5787 4856\n</Alert>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}