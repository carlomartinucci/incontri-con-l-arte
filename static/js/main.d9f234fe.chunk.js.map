{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["device","DeviceDetector","parse","navigator","userAgent","console","log","NotUsing","os","className","Download","href","Join","disabled","App","Container","Jumbotron","Tabs","variant","defaultActiveKey","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPASMA,GADiB,I,OAAIC,IACGC,MAAMC,UAAUC,WAE9CC,QAAQC,IAAIN,GAEZ,IAkFMO,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAH,OACf,uBAAGC,UAAU,oBAAb,mBACmBD,EADnB,2FAKIE,EAAW,SAAC,GAAD,IAAGF,EAAH,EAAGA,GAAH,OACf,qCACUA,EADV,IACe,IACb,uBAAGG,KAAK,4BAAR,4DAFF,qKAUIC,EAAO,kBACX,6EAEE,uBAAGD,KAAK,eAAeE,UAAQ,GAA/B,gDAFF,MASaC,EA7GH,kBACV,kBAACC,EAAA,EAAD,CAAWN,UAAU,OACnB,kBAACO,EAAA,EAAD,KACE,wBAAIP,UAAU,UAAd,wBAGF,kBAACQ,EAAA,EAAD,CAAMC,QAAQ,QAAQC,iBAAiB,UACrC,kBAACC,EAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,iBAC3B,kBAAC,EAAD,CAAUd,GAAG,kBADf,gJAMA,kBAACY,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,kBAAC,EAAD,CAAUd,GAAG,YAEb,kBAAC,EAAD,CAAUA,GAAG,YAEb,uHAKA,kBAAC,EAAD,OAGF,kBAACY,EAAA,EAAD,CAAKC,SAAS,MAAMC,MAAM,OACxB,kBAAC,EAAD,CAAUd,GAAG,QAEb,kBAAC,EAAD,CAAUA,GAAG,QAEb,oNAMA,kBAAC,EAAD,OAGF,kBAACY,EAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,UAC3B,kBAAC,EAAD,CAAUd,GAAG,kBACb,8EACmD,IACjD,uBAAGG,KAAK,iEAAR,iFAFF,KASA,yLAMA,kBAAC,EAAD,OAGF,kBAACS,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,WAC5B,kBAAC,EAAD,CAAUd,GAAG,2BAEb,yFAC8D,IAC5D,uBAAGG,KAAK,6EAAR,kFAMF,6IAKA,kBAAC,EAAD,UC7EYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmB7B,WACrBA,UAAU8B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.d9f234fe.chunk.js","sourcesContent":["import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\n\nimport DeviceDetector from \"device-detector-js\";\n\nconst deviceDetector = new DeviceDetector();\nconst device = deviceDetector.parse(navigator.userAgent);\n\nconsole.log(device);\n\nconst App = () => (\n  <Container className=\"p-3\">\n    <Jumbotron>\n      <h1 className=\"header\">Incontri con l'arte</h1>\n    </Jumbotron>\n\n    <Tabs variant='pills' defaultActiveKey=\"chrome\">\n      <Tab eventKey=\"chrome\" title=\"Google Chrome\">\n        <NotUsing os=\"Google Chrome\" />\n        Per seguire l'incontro sull'arte usando Google Chrome, ti basta cliccare su questo link che ti porterà direttamente al meeting su ZOOM.\n        .\n      </Tab>\n\n      <Tab eventKey=\"windows\" title=\"Windows\">\n        <NotUsing os=\"Windows\" />\n\n        <Download os=\"Windows\" />\n\n        <p>\n          Finito lo scaricamento, apri il file .exe che hai scaricato e clicca\n          sul pulsante Sì.\n        </p>\n\n        <Join />\n      </Tab>\n\n      <Tab eventKey=\"mac\" title=\"Mac\">\n        <NotUsing os=\"Mac\" />\n\n        <Download os=\"Mac\" />\n\n        <p>\n          Finito lo scaricamento, apri il pacchetto .pkg, clicca sul pulsante\n          Continua e concedi all’applicazione il permesso di accedere alla\n          cartella Download cliccando sul bottone OK.\n        </p>\n\n        <Join />\n      </Tab>\n\n      <Tab eventKey=\"iphone\" title=\"iPhone\">\n        <NotUsing os=\"iPhone o iPad\" />\n        <p>\n          Per accedere a un meeting zoom da Iphone o iPad,{\" \"}\n          <a href=\"https://apps.apple.com/it/app/zoom-cloud-meetings/id546505307\">\n            scarica l'applicazione di zoom tramite l'App Store facendo tap su\n            questo link\n          </a>\n          .\n        </p>\n\n        <p>\n          Poi premi sul pulsante Ottieni accanto all'app ZOOM Cloud Meetings, e\n          se serve conferma tramite Face ID, Touch ID o con la password del tuo\n          account Apple.\n        </p>\n\n        <Join />\n      </Tab>\n\n      <Tab eventKey=\"android\" title=\"Android\">\n        <NotUsing os=\"un dispositivo Android\" />\n\n        <p>\n          Per accedere a un meeting zoom dal tuo dispositivo Android,{\" \"}\n          <a href=\"https://play.google.com/store/apps/details?id=us.zoom.videomeetings&hl=it\">\n            scarica l'applicazione di zoom tramite Play Store facendo tap su\n            questo link.\n          </a>\n        </p>\n\n        <p>\n          Poi premi sul pulsante verde Installa. Al termine della procedura, fai\n          tap sul pulsante Apri per avviare Zoom.\n        </p>\n\n        <Join />\n      </Tab>\n    </Tabs>\n  </Container>\n);\n\nconst NotUsing = ({ os }) => (\n  <p className=\"small text-muted\">\n    Non stai usando {os}? Scegli quello che stai usando cliccando sopra e segui le istruzioni corrette per te.\n  </p>\n);\n\nconst Download = ({ os }) => (\n  <p>\n    Se usi {os},{\" \"}\n    <a href=\"https://zoom.us/download\">\n      vai a questa pagina per scaricare ZOOM sul tuo computer:\n    </a> clicca sul pulsante blu DOWNLOAD posto in alto, nella sezione\n    Zoom Client for Meetings, e attendi il download del pacchetto\n    d’installazione del programma.\n  </p>\n);\n\nconst Join = () => (\n  <p>\n    Una volta scaricato ZOOM, puoi partecipare all'\n    <a href=\"//google.com\" disabled>\n      incontro sull'arte cliccando su questo link.\n    </a>\n    .\n  </p>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}